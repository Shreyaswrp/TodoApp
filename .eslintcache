[{"/home/swastik/Music/REACTPROJECTSTRIAL/todo/src/App.js":"1","/home/swastik/Music/REACTPROJECTSTRIAL/todo/src/index.js":"2","/home/swastik/Music/REACTPROJECTSTRIAL/todo/src/Components/Todo.js":"3","/home/swastik/Music/REACTPROJECTSTRIAL/todo/src/Components/Itemslist.js":"4","/home/swastik/Music/REACTPROJECTSTRIAL/todo/src/Pages/Loginpage/Login.js":"5"},{"size":316,"mtime":1609154552160,"results":"6","hashOfConfig":"7"},{"size":525,"mtime":1609154339328,"results":"8","hashOfConfig":"7"},{"size":2942,"mtime":1608984957136,"results":"9","hashOfConfig":"7"},{"size":1185,"mtime":1608984483129,"results":"10","hashOfConfig":"7"},{"size":3940,"mtime":1609155132629,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1w0n35l",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/swastik/Music/REACTPROJECTSTRIAL/todo/src/App.js",[],"/home/swastik/Music/REACTPROJECTSTRIAL/todo/src/index.js",[],"/home/swastik/Music/REACTPROJECTSTRIAL/todo/src/Components/Todo.js",["23","24"],"import React, { Component } from \"react\";\nimport { confirmAlert } from \"react-confirm-alert\";\nimport \"react-confirm-alert/src/react-confirm-alert.css\";\nimport Itemslist from \"./Itemslist\";\nimport \"./Todo.css\";\n\nclass Todo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      list: [],\n      errmsg: \"\",\n      edititems: false,\n      currentElement: {\n        text: \"\",\n        key: \"\",\n      },\n    };\n  }\n\n  submitHandler = (e) => {\n    e.preventDefault();\n    const currentdata = this.state.currentElement;\n    if (currentdata.text == \"\" || currentdata.text.trim().length === 0) {\n      this.setState({ errmsg: \"Task cannot be empty\" });\n    } else {\n      const inputdata = [currentdata, ...this.state.list];\n      this.setState({\n        list: inputdata,\n        errmsg: \"\",\n        currentElement: {\n          text: \"\",\n          key: \"\",\n        },\n      });\n    }\n  };\n\n  removeMsgHandler = () => {\n    this.setState({\n      errmsg: \"\",\n    });\n  };\n\n  inputHandler = (e) => {\n    this.setState({\n      currentElement: {\n        text: e.target.value,\n        key: Date.now(),\n      },\n    });\n  };\n\n  deleteItem = (key) => {\n    confirmAlert({\n      title: \"Confirm to delete\",\n      message: \"Are you sure to do this.\",\n      buttons: [\n        {\n          label: \"Yes\",\n          onClick: () => {\n            const newList = this.state.list.filter((item) => item.key !== key);\n            this.setState({ list: newList });\n          },\n        },\n        {\n          label: \"No\",\n          onClick: () => console.log(\"No clicked\"),\n        },\n      ],\n    });\n  };\n\n  editItem = (textone, key) => {\n    if (this.state.edititems === true) {\n      const newTodo = this.state.list;\n      newTodo.map((item) => {\n        if (item.key === key) {\n          item.text = textone;\n        }\n      });\n      this.setState({ list: newTodo });\n    } else {\n      console.log(\"nothing\");\n    }\n  };\n  changeValue = () => {\n    this.setState({ edititems: !this.state.edititems });\n  };\n\n  render() {\n    return (\n      <div className=\"todoContainer\">\n        <form\n          className=\"todoForm\"\n          autoComplete=\"off\"\n          onSubmit={this.submitHandler}\n        >\n          <h2 className=\"heading\">ToDo List</h2>\n\n          <input\n            className=\"inputField\"\n            placeholder=\"enter your task\"\n            name=\"task\"\n            value={this.state.currentElement.text}\n            onChange={this.inputHandler}\n            onClick={this.removeMsgHandler}\n          ></input>\n          <button className=\"addtaskBtn\" type=\"submit\">\n            +\n          </button>\n          <div className=\"errMsg\">{this.state.errmsg}</div>\n          <Itemslist\n            list={this.state.list}\n            deleteItem={this.deleteItem}\n            editItem={this.editItem}\n            changeValue={this.changeValue}\n          ></Itemslist>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Todo;\n","/home/swastik/Music/REACTPROJECTSTRIAL/todo/src/Components/Itemslist.js",[],"/home/swastik/Music/REACTPROJECTSTRIAL/todo/src/Pages/Loginpage/Login.js",["25","26","27","28","29"],{"ruleId":"30","severity":1,"message":"31","line":24,"column":26,"nodeType":"32","messageId":"33","endLine":24,"endColumn":28},{"ruleId":"34","severity":1,"message":"35","line":77,"column":26,"nodeType":"36","messageId":"37","endLine":77,"endColumn":28},{"ruleId":"38","severity":1,"message":"39","line":20,"column":30,"nodeType":"40","messageId":"41","endLine":20,"endColumn":31,"suggestions":"42"},{"ruleId":"38","severity":1,"message":"39","line":20,"column":55,"nodeType":"40","messageId":"41","endLine":20,"endColumn":56,"suggestions":"43"},{"ruleId":"44","severity":1,"message":"45","line":73,"column":11,"nodeType":"46","messageId":"47","endLine":73,"endColumn":15},{"ruleId":"48","severity":1,"message":"49","line":131,"column":11,"nodeType":"50","endLine":131,"endColumn":42},{"ruleId":"51","severity":1,"message":"52","line":134,"column":11,"nodeType":"50","endLine":134,"endColumn":59},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["53","54"],["55","56"],"no-unused-vars","'resp' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",{"messageId":"57","fix":"58","desc":"59"},{"messageId":"60","fix":"61","desc":"62"},{"messageId":"57","fix":"63","desc":"59"},{"messageId":"60","fix":"64","desc":"62"},"removeEscape",{"range":"65","text":"66"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"67","text":"68"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"69","text":"66"},{"range":"70","text":"68"},[445,446],"",[445,445],"\\",[470,471],[470,470]]